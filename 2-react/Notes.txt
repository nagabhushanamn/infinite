
react.js envi setup
------------------

> node -v
> npm -v
> npm i -g yarn   ( optional )
> npm i -g create-react-app

on workspace

> create-react-app <app-name>
> cd app-name

> npm start or yarn start

----------------------------------------

==> global location where npm keeps global packages/tools 

> npm get prefix   
<path>
> set path=%PATH%;<path>
e.g
> create-react-app <app-name> 

----------------------------------------

-----------------
react topics
-----------------

    - props & state
    - life-cycle methods
    - inter component communication
    - context
    - container components / Higher-Order-components

----------------------------------------   
// props 
----------------------------------------   

==> immutable data from parent-component to chi


----------------------------------------   
// state 
----------------------------------------   

==> mutable data on component itself



----------------------------------------
- life-cycle methods
----------------------------------------

    - mounting
        -> constructor()
        -> render()
        -> componentDidMount()
    - updating
        - shouldComponentUpdate()
        - render()
        - componentDidUpdate()
    - unmounting
        - componenWillUnmount()

---------------------------------------

imp-note : 

by defaylt, react components will re-render on 3 conditions

    -> setState()
    -> newProps
    -> forceUpdate()

-------------------------------------------    
- inter component communication
-------------------------------------------


  parent - child  ==> props
  child  - parent ==> event



e.g 

    --------------------------
    | -----------   ----------
    | | Hit - 4  |  | kick - 6
    | -----------   -----------
    | -------------------------
    | |Total Actions : 10      
    | -------------------------
    |--------------------------
       

  https://reactjs.org/docs/thinking-in-react.html

  Start With A Mock
  
  Step 1: Break The UI Into A Component Hierarchy

        - ActionBox
            -Action(s)
            -Summary

  step-2: Build A Static Version in React     

  Step 3: Identify The Minimal (but complete) Representation Of UI State/ui-data/model

        - each action count
        - total action count

  Step 4: Identify Where Your State Should Live

        - each action count

            => Action

        - total action count

            => ActionBox 

  Step 5: Add Inverse Data Flow          




----------------------------------------
- context
----------------------------------------


Context provides a way to pass data through the component tree
without having to pass props down manually at every level.



----------------------------------------
- container components
----------------------------------------

    
    <Container>
        <A/>
        <B/>
    </Container>



----------------------------------------
- higher order components
----------------------------------------    

    - pattern to re-use common logic


---------------------------------------


----------------------------------------------------
case-study : eat-IT
----------------------------------------------------

    - loadItems
    - loadReviews
    - buy
    - checkout
    - view orders & status
    - submit-new-review
    - login / logout

----------------------------------------------------    

