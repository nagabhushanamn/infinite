



Arch.. design issues  with 'react.js' only
------------------------------------------

===> state/model/ui-data is scattered across UI components
===> state & state-change logic & network/service calls 
are tightly-coupled with UI components
===> if same state is required in multiple components 
either we should duplicate that state in components or we should pass via input properties 
===> Unit-Testing is very difficult in components
===> we cant re-use same components across diffent pages or applications

soln:

==> isolate common state & state change logic & n/wing logic 
from UI components


How ?

way-1 : using MVC Arch pattern

    --> bi-directional data-flow 
        b/w view & state/model


way-2 : Flux pattern  ( from facebook )

        --> uni-directional data-flow 
            b/w view & state/model      
            
------------------------------------------


steps to do state management with redux-lib


UI  ==>  Eat-IT


//---------------------------------------------
step-1 : indentify state/model & r/s b/w them, 
         that represents UI
//---------------------------------------------

 - items
 - reviews
 - cart
 - orders
 - account
 ......

//---------------------------------------------
step-2 : indentify action(s) which cause state change
//---------------------------------------------

 - LOAD_ITEMS
 - LOAD_REVIEWS
 - ADD_NEW_REVIEW
 - BUY
 - CHECKOUT
 - LOGIN
......


//---------------------------------------------
step-3 : create action(s) by action creator(s) / operations
//---------------------------------------------


e.g function loadItems(food,10){
    //...............
    return {type:LOAD_ITEMS_SUCCESS,[]}  // Ation
}




//---------------------------------------------
step-4 : process action(s) by reducer(s)  & do state  change
//---------------------------------------------

e.g  function itemsReducer(state,action){
    //....
    return new-state
}


//---------------------------------------------
step-5 : combine/compose all reducer(s) as root-reducer
//---------------------------------------------

i.e function composition



//---------------------------------------------
step-6 : create store with root-reducer
//---------------------------------------------











redux middlwares to support async actions

    => redux-thunk        ==> simple 
    => redux-saga         ==> based on generator function(s)
    => redux-observables  ==> based on reactive programming ( RXJS)









